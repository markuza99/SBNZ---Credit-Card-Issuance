package sbnz.integracija;

import sbnz.integracija.example.data.*;
import sbnz.integracija.example.facts.*;
import sbnz.integracija.example.events.*;
import java.util.Date;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.TimeUnit;
import java.time.LocalDate;



declare AlarmTriggered
    payerId: Long
end


rule "More than 2 transactions in 48 hours where amount is greater than limit"
    when
		$dat: Date()
        $t1: TransactionEvent($pId: payerId, $rId: recipientId)
        $cc: CreditCard(id == $pId, blocked == false, $l: limit)
        $t2: TransactionEvent(
            this != $t1, 
            payerId == $pId,
            recipientId == $rId,
            totalAmount >= $l, 
            this meets[48h] $t1
        )
        not (SuspiciousTransactionEvent(payerId == $pId, reason == "Transactions over limit", id == $dat))
    then
    	System.out.println("OPASNO: KLIJENT JE POSLAO PREKO LIMITA 2 PUTA ");
        insert(new SuspiciousTransactionEvent($pId, "Transactions over limit", $dat));
end

rule "More than 5 transactions in 6 hours from one client to same client"
    when
    	$dat: Date()
        $t1: TransactionEvent($pId: payerId, $rId: recipientId)
        $cc: CreditCard(id == $pId, blocked == false, $l: limit)
        Number($val: intValue >= 4) from accumulate(
            $t2: TransactionEvent(
                this != $t1, 
                payerId == $pId,
                recipientId == $rId, 
                this meets[6h] $t1
            ),
            count($t2)
        )
        not (SuspiciousTransactionEvent(payerId == $pId, reason == "Many transactions same receiver", id == $dat))
    then
    	System.out.println("OPASNO: KLIJENT JE POSLAO ISTOM KLIJENU 5 PUTA ");
        insert(new SuspiciousTransactionEvent($pId, "Many transactions same receiver",$dat));
end

rule "More than 10 complex transactions in an hour from one client"
    when
       	$dat: Date()
        $t1: TransactionEvent($pId: payerId, $rId: recipientId)
        $cc: CreditCard(id == $pId, blocked == false, $l: limit)
        Number($val: intValue >= 9) from accumulate(
            $t2: TransactionEvent(
                this != $t1, 
                payerId == $pId,
                this meets[1h] $t1
            ),
            count($t2)
        )
        not (SuspiciousTransactionEvent(payerId == $pId, reason == "Many transactions", id == $dat))
    then
    	System.out.println("OPASNO: KLIJENT JE POSLAO VISE TRANSAKCIJA 10 PUTA");
        insert(new SuspiciousTransactionEvent($pId, "Many transactions", $dat));
end



rule "More than 2 suspicious cases in the day and we warn the owner"
    when
        SuspiciousTransactionEvent($cId: payerId)
        $cc: CreditCard(id == $cId, blocked == false)
        not (AlarmTriggered(payerId == $cId))
        $listTOL: List() from collect(SuspiciousTransactionEvent(payerId == $cId, reason == "Transactions over limit"))
		$listMT:  List() from collect(SuspiciousTransactionEvent(payerId == $cId, reason == "Many transactions"))
		$listMTSR:  List() from collect(SuspiciousTransactionEvent(payerId == $cId, reason == "Many transactions same receiver"))
		eval($listTOL.size() == 2) or
		eval($listMTSR.size() == 3) or
		eval($listMT.size() == 4) or
		eval($listTOL.size() + $listMTSR.size() + $listMT.size() >= 6)
    then
        //warn the owner
        System.out.println("UPOZORENJE: KARTICA JE UPOZORENA");
        modify($cc) {setWarned(true)}
        insert(new AlarmTriggered($cId));
end


rule "OPA DJURDJO"
    when
        SuspiciousTransactionEvent($cId: payerId)
        AlarmTriggered(payerId == $cId)
        $cc: CreditCard(id == $cId, blocked == false)
        $listTOL: List() from collect(SuspiciousTransactionEvent(payerId == $cId, reason == "Transactions over limit"))
		$listMT:  List() from collect(SuspiciousTransactionEvent(payerId == $cId, reason == "Many transactions"))
		$listMTSR:  List() from collect(SuspiciousTransactionEvent(payerId == $cId, reason == "Many transactions same receiver"))
		eval($listTOL.size() == 4) or
		eval($listMTSR.size() == 6) or
		eval($listMT.size() == 8) or
		eval($listTOL.size() + $listMTSR.size() + $listMT.size() >= 12)
    then
        //warn the owner
        modify($cc) {setBlocked(true)}
        System.out.println("BLOKIRANJE: KARTICA JE BLOKIRANA");
      
end
